{"ast":null,"code":"var _jsxFileName = \"/Users/jimmycodemunity/Desktop/React/reactcrud/src/pages/RegisterPage.jsx\";\nimport React from 'react';\nimport MainLayout from '../layout/MainLayout';\nimport Swal from 'sweetalert2';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst showRegistrationForm = async () => {\n  const {\n    value: formValues\n  } = await Swal.fire({\n    title: 'Register',\n    html: '<input id=\"username\" class=\"swal2-input\" placeholder=\"Username\">' + '<input id=\"email\" class=\"swal2-input\" placeholder=\"Email\">' + '<input id=\"phone\" class=\"swal2-input\" placeholder=\"Phone\">' + '<input id=\"password\" type=\"password\" class=\"swal2-input\" placeholder=\"Password\">',\n    focusConfirm: false,\n    preConfirm: () => {\n      return {\n        username: document.getElementById('username').value,\n        email: document.getElementById('email').value,\n        phone: document.getElementById('phone').value,\n        password: document.getElementById('password').value\n      };\n    }\n  });\n  if (formValues) {\n    try {\n      // Assuming you have a backend endpoint to handle user registration\n      const response = await axios.post('https://your-backend-api.com/register', formValues);\n      if (response.data.success) {\n        Swal.fire({\n          icon: 'success',\n          title: 'Registration successful!'\n        });\n      } else {\n        Swal.fire({\n          icon: 'error',\n          title: 'Registration failed',\n          text: response.data.message\n        });\n      }\n    } catch (error) {\n      console.error(error);\n      Swal.fire({\n        icon: 'error',\n        title: 'Error',\n        text: 'An error occurred during registration'\n      });\n    }\n  }\n};\n\n// Trigger the function when needed, for example, on a button click\n/*#__PURE__*/_jsxDEV(\"button\", {\n  onClick: showRegistrationForm,\n  children: \"Register\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 55,\n  columnNumber: 1\n}, this);\nexport default RegisterPage;","map":{"version":3,"names":["React","MainLayout","Swal","axios","jsxDEV","_jsxDEV","showRegistrationForm","value","formValues","fire","title","html","focusConfirm","preConfirm","username","document","getElementById","email","phone","password","response","post","data","success","icon","text","message","error","console","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","RegisterPage"],"sources":["/Users/jimmycodemunity/Desktop/React/reactcrud/src/pages/RegisterPage.jsx"],"sourcesContent":["import React from 'react';\nimport MainLayout from '../layout/MainLayout';\n\nimport Swal from 'sweetalert2';\nimport axios from 'axios';\n\nconst showRegistrationForm = async () => {\n    const { value: formValues } = await Swal.fire({\n        title: 'Register',\n        html:\n            '<input id=\"username\" class=\"swal2-input\" placeholder=\"Username\">' +\n            '<input id=\"email\" class=\"swal2-input\" placeholder=\"Email\">' +\n            '<input id=\"phone\" class=\"swal2-input\" placeholder=\"Phone\">' +\n            '<input id=\"password\" type=\"password\" class=\"swal2-input\" placeholder=\"Password\">',\n        focusConfirm: false,\n        preConfirm: () => {\n            return {\n                username: document.getElementById('username').value,\n                email: document.getElementById('email').value,\n                phone: document.getElementById('phone').value,\n                password: document.getElementById('password').value,\n            };\n        },\n    });\n\n    if (formValues) {\n        try {\n            // Assuming you have a backend endpoint to handle user registration\n            const response = await axios.post('https://your-backend-api.com/register', formValues);\n\n            if (response.data.success) {\n                Swal.fire({\n                    icon: 'success',\n                    title: 'Registration successful!',\n                });\n            } else {\n                Swal.fire({\n                    icon: 'error',\n                    title: 'Registration failed',\n                    text: response.data.message,\n                });\n            }\n        } catch (error) {\n            console.error(error);\n            Swal.fire({\n                icon: 'error',\n                title: 'Error',\n                text: 'An error occurred during registration',\n            });\n        }\n    }\n};\n\n// Trigger the function when needed, for example, on a button click\n<button onClick={showRegistrationForm}>Register</button>\n\n\nexport default RegisterPage;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,sBAAsB;AAE7C,OAAOC,IAAI,MAAM,aAAa;AAC9B,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,oBAAoB,GAAG,MAAAA,CAAA,KAAY;EACrC,MAAM;IAAEC,KAAK,EAAEC;EAAW,CAAC,GAAG,MAAMN,IAAI,CAACO,IAAI,CAAC;IAC1CC,KAAK,EAAE,UAAU;IACjBC,IAAI,EACA,kEAAkE,GAClE,4DAA4D,GAC5D,4DAA4D,GAC5D,kFAAkF;IACtFC,YAAY,EAAE,KAAK;IACnBC,UAAU,EAAEA,CAAA,KAAM;MACd,OAAO;QACHC,QAAQ,EAAEC,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC,CAACT,KAAK;QACnDU,KAAK,EAAEF,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAC,CAACT,KAAK;QAC7CW,KAAK,EAAEH,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAC,CAACT,KAAK;QAC7CY,QAAQ,EAAEJ,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC,CAACT;MAClD,CAAC;IACL;EACJ,CAAC,CAAC;EAEF,IAAIC,UAAU,EAAE;IACZ,IAAI;MACA;MACA,MAAMY,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,IAAI,CAAC,uCAAuC,EAAEb,UAAU,CAAC;MAEtF,IAAIY,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACvBrB,IAAI,CAACO,IAAI,CAAC;UACNe,IAAI,EAAE,SAAS;UACfd,KAAK,EAAE;QACX,CAAC,CAAC;MACN,CAAC,MAAM;QACHR,IAAI,CAACO,IAAI,CAAC;UACNe,IAAI,EAAE,OAAO;UACbd,KAAK,EAAE,qBAAqB;UAC5Be,IAAI,EAAEL,QAAQ,CAACE,IAAI,CAACI;QACxB,CAAC,CAAC;MACN;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpBzB,IAAI,CAACO,IAAI,CAAC;QACNe,IAAI,EAAE,OAAO;QACbd,KAAK,EAAE,OAAO;QACde,IAAI,EAAE;MACV,CAAC,CAAC;IACN;EACJ;AACJ,CAAC;;AAED;AACA,aAAApB,OAAA;EAAQwB,OAAO,EAAEvB,oBAAqB;EAAAwB,QAAA,EAAC;AAAQ;EAAAC,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAQ,CAAC;AAGxD,eAAeC,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}