{"ast":null,"code":"var _jsxFileName = \"/Users/jimmycodemunity/Desktop/React/reactcrud/src/pages/RegisterPage.jsx\";\nimport React from 'react';\nimport MainLayout from '../layout/MainLayout';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RegisterPage = async () => {\n  const {\n    value: formValues\n  } = await Swal.fire({\n    title: 'Register',\n    html: '<input id=\"username\" class=\"swal2-input\" placeholder=\"Username\">' + '<input id=\"email\" class=\"swal2-input\" placeholder=\"Email\">' + '<input id=\"phone\" class=\"swal2-input\" placeholder=\"Phone\">' + '<input id=\"password\" type=\"password\" class=\"swal2-input\" placeholder=\"Password\">',\n    focusConfirm: false,\n    preConfirm: () => {\n      return {\n        username: document.getElementById('username').value,\n        email: document.getElementById('email').value,\n        phone: document.getElementById('phone').value,\n        password: document.getElementById('password').value\n      };\n    }\n  });\n  if (formValues) {\n    try {\n      // Assuming you have a backend endpoint to handle user registration\n      const response = await axios.post('https://your-backend-api.com/register', formValues);\n      if (response.data.success) {\n        Swal.fire({\n          icon: 'success',\n          title: 'Registration successful!'\n        });\n      } else {\n        Swal.fire({\n          icon: 'error',\n          title: 'Registration failed',\n          text: response.data.message\n        });\n      }\n    } catch (error) {\n      console.error(error);\n      Swal.fire({\n        icon: 'error',\n        title: 'Error',\n        text: 'An error occurred during registration'\n      });\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(MainLayout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_c = RegisterPage;\nexport default RegisterPage;\nvar _c;\n$RefreshReg$(_c, \"RegisterPage\");","map":{"version":3,"names":["React","MainLayout","jsxDEV","_jsxDEV","RegisterPage","value","formValues","Swal","fire","title","html","focusConfirm","preConfirm","username","document","getElementById","email","phone","password","response","axios","post","data","success","icon","text","message","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jimmycodemunity/Desktop/React/reactcrud/src/pages/RegisterPage.jsx"],"sourcesContent":["import React from 'react';\nimport MainLayout from '../layout/MainLayout';\n\nconst RegisterPage = async() => {\n  const { value: formValues } = await Swal.fire({\n    title: 'Register',\n    html:\n      '<input id=\"username\" class=\"swal2-input\" placeholder=\"Username\">' +\n      '<input id=\"email\" class=\"swal2-input\" placeholder=\"Email\">' +\n      '<input id=\"phone\" class=\"swal2-input\" placeholder=\"Phone\">' +\n      '<input id=\"password\" type=\"password\" class=\"swal2-input\" placeholder=\"Password\">',\n    focusConfirm: false,\n    preConfirm: () => {\n      return {\n        username: document.getElementById('username').value,\n        email: document.getElementById('email').value,\n        phone: document.getElementById('phone').value,\n        password: document.getElementById('password').value,\n      };\n    },\n  });\n\n  if (formValues) {\n    try {\n      // Assuming you have a backend endpoint to handle user registration\n      const response = await axios.post('https://your-backend-api.com/register', formValues);\n\n      if (response.data.success) {\n        Swal.fire({\n          icon: 'success',\n          title: 'Registration successful!',\n        });\n      } else {\n        Swal.fire({\n          icon: 'error',\n          title: 'Registration failed',\n          text: response.data.message,\n        });\n      }\n    } catch (error) {\n      console.error(error);\n      Swal.fire({\n        icon: 'error',\n        title: 'Error',\n        text: 'An error occurred during registration',\n      });\n    }\n  }\n  return (\n    <MainLayout>\n      <div>\n        <h1>Register</h1>\n      </div>\n    </MainLayout>\n  );\n}\n\nexport default RegisterPage;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAW;EAC9B,MAAM;IAAEC,KAAK,EAAEC;EAAW,CAAC,GAAG,MAAMC,IAAI,CAACC,IAAI,CAAC;IAC5CC,KAAK,EAAE,UAAU;IACjBC,IAAI,EACF,kEAAkE,GAClE,4DAA4D,GAC5D,4DAA4D,GAC5D,kFAAkF;IACpFC,YAAY,EAAE,KAAK;IACnBC,UAAU,EAAEA,CAAA,KAAM;MAChB,OAAO;QACLC,QAAQ,EAAEC,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC,CAACV,KAAK;QACnDW,KAAK,EAAEF,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAC,CAACV,KAAK;QAC7CY,KAAK,EAAEH,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAC,CAACV,KAAK;QAC7Ca,QAAQ,EAAEJ,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC,CAACV;MAChD,CAAC;IACH;EACF,CAAC,CAAC;EAEF,IAAIC,UAAU,EAAE;IACd,IAAI;MACF;MACA,MAAMa,QAAQ,GAAG,MAAMC,KAAK,CAACC,IAAI,CAAC,uCAAuC,EAAEf,UAAU,CAAC;MAEtF,IAAIa,QAAQ,CAACG,IAAI,CAACC,OAAO,EAAE;QACzBhB,IAAI,CAACC,IAAI,CAAC;UACRgB,IAAI,EAAE,SAAS;UACff,KAAK,EAAE;QACT,CAAC,CAAC;MACJ,CAAC,MAAM;QACLF,IAAI,CAACC,IAAI,CAAC;UACRgB,IAAI,EAAE,OAAO;UACbf,KAAK,EAAE,qBAAqB;UAC5BgB,IAAI,EAAEN,QAAQ,CAACG,IAAI,CAACI;QACtB,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpBpB,IAAI,CAACC,IAAI,CAAC;QACRgB,IAAI,EAAE,OAAO;QACbf,KAAK,EAAE,OAAO;QACdgB,IAAI,EAAE;MACR,CAAC,CAAC;IACJ;EACF;EACA,oBACEtB,OAAA,CAACF,UAAU;IAAA4B,QAAA,eACT1B,OAAA;MAAA0B,QAAA,eACE1B,OAAA;QAAA0B,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACd;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAEjB,CAAC;AAAAC,EAAA,GApDK9B,YAAY;AAsDlB,eAAeA,YAAY;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}